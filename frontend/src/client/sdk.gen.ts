// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	AuthCookieOauthLoginApiV1AuthCookieLoginPostData,
	AuthCookieOauthLoginApiV1AuthCookieLoginPostResponse,
	AuthCookieOauthLogoutApiV1AuthCookieLogoutPostResponse,
	AuthenticatedRouteApiV1AuthenticatedRouteGetResponse,
	OauthGoogleCookieOauthAuthorizeApiV1AuthGoogleAuthorizeGetData,
	OauthGoogleCookieOauthAuthorizeApiV1AuthGoogleAuthorizeGetResponse,
	OauthGoogleCookieOauthCallbackApiV1AuthGoogleCallbackGetData,
	OauthGoogleCookieOauthCallbackApiV1AuthGoogleCallbackGetResponse,
	UsersCurrentUserApiV1UsersMeGetResponse,
	UsersDeleteUserApiV1UsersIdDeleteData,
	UsersDeleteUserApiV1UsersIdDeleteResponse,
	UsersPatchCurrentUserApiV1UsersMePatchData,
	UsersPatchCurrentUserApiV1UsersMePatchResponse,
	UsersPatchUserApiV1UsersIdPatchData,
	UsersPatchUserApiV1UsersIdPatchResponse,
	UsersUserApiV1UsersIdGetData,
	UsersUserApiV1UsersIdGetResponse,
} from "./types.gen";

export class AuthService {
	/**
	 * Auth:Cookie Oauth.Login
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns unknown Successful Response
	 * @returns void No Content
	 * @throws ApiError
	 */
	public static cookieOauthLoginApiV1AuthCookieLoginPost(
		data: AuthCookieOauthLoginApiV1AuthCookieLoginPostData,
	): CancelablePromise<AuthCookieOauthLoginApiV1AuthCookieLoginPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/auth/cookie/login",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				400: "Bad Request",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Auth:Cookie Oauth.Logout
	 * @returns unknown Successful Response
	 * @returns void No Content
	 * @throws ApiError
	 */
	public static cookieOauthLogoutApiV1AuthCookieLogoutPost(): CancelablePromise<AuthCookieOauthLogoutApiV1AuthCookieLogoutPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/auth/cookie/logout",
			errors: {
				401: "Missing token or inactive user.",
			},
		});
	}

	/**
	 * Oauth:Google.Cookie Oauth.Authorize
	 * @param data The data for the request.
	 * @param data.scopes
	 * @returns OAuth2AuthorizeResponse Successful Response
	 * @throws ApiError
	 */
	public static oauthGoogleCookieOauthAuthorizeApiV1AuthGoogleAuthorizeGet(
		data: OauthGoogleCookieOauthAuthorizeApiV1AuthGoogleAuthorizeGetData = {},
	): CancelablePromise<OauthGoogleCookieOauthAuthorizeApiV1AuthGoogleAuthorizeGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/auth/google/authorize",
			query: {
				scopes: data.scopes,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Oauth:Google.Cookie Oauth.Callback
	 * The response varies based on the authentication backend used.
	 * @param data The data for the request.
	 * @param data.code
	 * @param data.codeVerifier
	 * @param data.state
	 * @param data.error
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static oauthGoogleCookieOauthCallbackApiV1AuthGoogleCallbackGet(
		data: OauthGoogleCookieOauthCallbackApiV1AuthGoogleCallbackGetData = {},
	): CancelablePromise<OauthGoogleCookieOauthCallbackApiV1AuthGoogleCallbackGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/auth/google/callback",
			query: {
				code: data.code,
				code_verifier: data.codeVerifier,
				state: data.state,
				error: data.error,
			},
			errors: {
				400: "Bad Request",
				422: "Validation Error",
			},
		});
	}
}

export class DefaultService {
	/**
	 * Authenticated Route
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static authenticatedRouteApiV1AuthenticatedRouteGet(): CancelablePromise<AuthenticatedRouteApiV1AuthenticatedRouteGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/authenticated-route",
		});
	}
}

export class UsersService {
	/**
	 * Users:Current User
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static currentUserApiV1UsersMeGet(): CancelablePromise<UsersCurrentUserApiV1UsersMeGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/me",
			errors: {
				401: "Missing token or inactive user.",
			},
		});
	}

	/**
	 * Users:Patch Current User
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static patchCurrentUserApiV1UsersMePatch(
		data: UsersPatchCurrentUserApiV1UsersMePatchData,
	): CancelablePromise<UsersPatchCurrentUserApiV1UsersMePatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/me",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				400: "Bad Request",
				401: "Missing token or inactive user.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:User
	 * @param data The data for the request.
	 * @param data.id
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static userApiV1UsersIdGet(
		data: UsersUserApiV1UsersIdGetData,
	): CancelablePromise<UsersUserApiV1UsersIdGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{id}",
			path: {
				id: data.id,
			},
			errors: {
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:Patch User
	 * @param data The data for the request.
	 * @param data.id
	 * @param data.requestBody
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static patchUserApiV1UsersIdPatch(
		data: UsersPatchUserApiV1UsersIdPatchData,
	): CancelablePromise<UsersPatchUserApiV1UsersIdPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{id}",
			path: {
				id: data.id,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				400: "Bad Request",
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:Delete User
	 * @param data The data for the request.
	 * @param data.id
	 * @returns void Successful Response
	 * @throws ApiError
	 */
	public static deleteUserApiV1UsersIdDelete(
		data: UsersDeleteUserApiV1UsersIdDeleteData,
	): CancelablePromise<UsersDeleteUserApiV1UsersIdDeleteResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/users/{id}",
			path: {
				id: data.id,
			},
			errors: {
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}
}
