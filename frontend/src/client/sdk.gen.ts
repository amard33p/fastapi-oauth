// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	AuthCookieOauthLoginAuthCookieLoginPostData,
	AuthCookieOauthLoginAuthCookieLoginPostResponse,
	AuthCookieOauthLogoutAuthCookieLogoutPostResponse,
	AuthenticatedRouteAuthenticatedRouteGetResponse,
	OauthGoogleCookieOauthAuthorizeAuthGoogleAuthorizeGetData,
	OauthGoogleCookieOauthAuthorizeAuthGoogleAuthorizeGetResponse,
	OauthGoogleCookieOauthCallbackAuthGoogleCallbackGetData,
	OauthGoogleCookieOauthCallbackAuthGoogleCallbackGetResponse,
	UsersCurrentUserUsersMeGetResponse,
	UsersDeleteUserUsersIdDeleteData,
	UsersDeleteUserUsersIdDeleteResponse,
	UsersPatchCurrentUserUsersMePatchData,
	UsersPatchCurrentUserUsersMePatchResponse,
	UsersPatchUserUsersIdPatchData,
	UsersPatchUserUsersIdPatchResponse,
	UsersUserUsersIdGetData,
	UsersUserUsersIdGetResponse,
} from "./types.gen";

export class AuthService {
	/**
	 * Auth:Cookie Oauth.Login
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns unknown Successful Response
	 * @returns void No Content
	 * @throws ApiError
	 */
	public static cookieOauthLoginAuthCookieLoginPost(
		data: AuthCookieOauthLoginAuthCookieLoginPostData,
	): CancelablePromise<AuthCookieOauthLoginAuthCookieLoginPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/auth/cookie/login",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				400: "Bad Request",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Auth:Cookie Oauth.Logout
	 * @returns unknown Successful Response
	 * @returns void No Content
	 * @throws ApiError
	 */
	public static cookieOauthLogoutAuthCookieLogoutPost(): CancelablePromise<AuthCookieOauthLogoutAuthCookieLogoutPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/auth/cookie/logout",
			errors: {
				401: "Missing token or inactive user.",
			},
		});
	}

	/**
	 * Oauth:Google.Cookie Oauth.Authorize
	 * @param data The data for the request.
	 * @param data.scopes
	 * @returns OAuth2AuthorizeResponse Successful Response
	 * @throws ApiError
	 */
	public static oauthGoogleCookieOauthAuthorizeAuthGoogleAuthorizeGet(
		data: OauthGoogleCookieOauthAuthorizeAuthGoogleAuthorizeGetData = {},
	): CancelablePromise<OauthGoogleCookieOauthAuthorizeAuthGoogleAuthorizeGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/auth/google/authorize",
			query: {
				scopes: data.scopes,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Oauth:Google.Cookie Oauth.Callback
	 * The response varies based on the authentication backend used.
	 * @param data The data for the request.
	 * @param data.code
	 * @param data.codeVerifier
	 * @param data.state
	 * @param data.error
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static oauthGoogleCookieOauthCallbackAuthGoogleCallbackGet(
		data: OauthGoogleCookieOauthCallbackAuthGoogleCallbackGetData = {},
	): CancelablePromise<OauthGoogleCookieOauthCallbackAuthGoogleCallbackGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/auth/google/callback",
			query: {
				code: data.code,
				code_verifier: data.codeVerifier,
				state: data.state,
				error: data.error,
			},
			errors: {
				400: "Bad Request",
				422: "Validation Error",
			},
		});
	}
}

export class DefaultService {
	/**
	 * Authenticated Route
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static authenticatedRouteAuthenticatedRouteGet(): CancelablePromise<AuthenticatedRouteAuthenticatedRouteGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/authenticated-route",
		});
	}
}

export class UsersService {
	/**
	 * Users:Current User
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static currentUserUsersMeGet(): CancelablePromise<UsersCurrentUserUsersMeGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/users/me",
			errors: {
				401: "Missing token or inactive user.",
			},
		});
	}

	/**
	 * Users:Patch Current User
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static patchCurrentUserUsersMePatch(
		data: UsersPatchCurrentUserUsersMePatchData,
	): CancelablePromise<UsersPatchCurrentUserUsersMePatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/users/me",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				400: "Bad Request",
				401: "Missing token or inactive user.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:User
	 * @param data The data for the request.
	 * @param data.id
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static userUsersIdGet(
		data: UsersUserUsersIdGetData,
	): CancelablePromise<UsersUserUsersIdGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/users/{id}",
			path: {
				id: data.id,
			},
			errors: {
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:Patch User
	 * @param data The data for the request.
	 * @param data.id
	 * @param data.requestBody
	 * @returns UserRead Successful Response
	 * @throws ApiError
	 */
	public static patchUserUsersIdPatch(
		data: UsersPatchUserUsersIdPatchData,
	): CancelablePromise<UsersPatchUserUsersIdPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/users/{id}",
			path: {
				id: data.id,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				400: "Bad Request",
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}

	/**
	 * Users:Delete User
	 * @param data The data for the request.
	 * @param data.id
	 * @returns void Successful Response
	 * @throws ApiError
	 */
	public static deleteUserUsersIdDelete(
		data: UsersDeleteUserUsersIdDeleteData,
	): CancelablePromise<UsersDeleteUserUsersIdDeleteResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/users/{id}",
			path: {
				id: data.id,
			},
			errors: {
				401: "Missing token or inactive user.",
				403: "Not a superuser.",
				404: "The user does not exist.",
				422: "Validation Error",
			},
		});
	}
}
